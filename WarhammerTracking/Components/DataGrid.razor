@using System.Linq.Dynamic.Core
@using System.Linq.Expressions
@inject AppState AppState
@typeparam TItem

<style>
        .currentpage {
            background-color: dodgerblue;
            color: white;
        }
</style>
<div class="btn-group" style="margin-bottom: 10px;" role="group">
    <CascadingValue Value="this">
        @Filters
    </CascadingValue>
</div>
<table class="table table-striped table-bordered mdl-data-table">
    <thead class="thead-inverse">

    <tr>
         <CascadingValue Value="this"> 
             @Column
         </CascadingValue> 
    </tr>

    </thead>

    <tbody>

    @foreach (var item in ItemList)

    {
        <tr>@GridRow(item)</tr>
    }

    </tbody>

</table>

<div class="pagination">
    <button type="button" class="btn btn-primary" style="margin-right:15px;" @onclick="NavigateToPreviousPage">Prec.</button>
        @for (int i = startPage; i <= endPage; i++)
        {
            var currentPage = i;
            <input type="button" class="btn pagebutton @(currentPage == curPage ? "currentpage" : "")" @bind="@currentPage" @onclick=@(() => updateList(currentPage)) />
        }
    <button type="button" class="btn btn-primary" style="margin-left:15px;" @onclick="NavigateToNextPage">Suiv.</button>
</div>

@code {
   
    [Parameter]
    public IEnumerable<TItem> Items { get; set; }
    [Parameter]
    public RenderFragment<TItem> GridRow { get; set; }
    [Parameter]
    public RenderFragment Column { get; set; }
    [Parameter]
    public RenderFragment Filters { get; set; }
    [Parameter]
    public int PageSize { get; set; }
    IEnumerable<TItem> ItemList { get; set; }

    int totalPages;
    int curPage;
    int pagerSize;
    int startPage;
    int endPage;
    public string CurrentSortColumn; 
    public Dictionary<string, string> FilterDictionary { get; set; } 
    
    protected override async Task OnInitializedAsync()
    {
        pagerSize = 5;
        curPage = 1;
        ItemList = Items.Skip((curPage - 1) * PageSize).Take(PageSize);
        totalPages = (int) Math.Ceiling(Items.Count() / (decimal) PageSize);
        SetPagerSize();
        AppState.RefreshRequested += RefreshMe;
        FilterDictionary = new Dictionary<string, string>(); 
    }

    private void updateList(int currentPage)
    {
        ItemList = Items.Skip((currentPage - 1) * PageSize).Take(PageSize);
        curPage = currentPage;
        StateHasChanged();
    }

    void NavigateToNextPage()
    {
        if (curPage < totalPages)
        {
            if (curPage == endPage)
            {
                SetPagerSize();
            }
            curPage += 1;
        }
        updateList(curPage);
    }
            
    void NavigateToPreviousPage() 
    {
        if (curPage > 1)
        {
            if (curPage == startPage)
            {
                SetPagerSize();
            }

            curPage -= 1;
        }

        updateList(curPage);
    }

    public void SetPagerSize()
    {
        if (endPage < totalPages)
        {
            startPage = endPage + 1;
            if (endPage + pagerSize < totalPages)
            {
                endPage = startPage + pagerSize - 1;
            }
            else
            {
                endPage = totalPages;
            }

            StateHasChanged();
        }
        else if (startPage > 1)
        {
            endPage = startPage - 1;
            startPage = startPage - pagerSize;
        }
    }

    public void SetFilters(Expression<Func<TItem,bool>>  Expression)
    {
        ItemList = Items.AsQueryable().Where(Expression).ToList();
        StateHasChanged();
    }
    
    private void RefreshMe()
    {
        StateHasChanged();
        updateList(curPage);
    }

}